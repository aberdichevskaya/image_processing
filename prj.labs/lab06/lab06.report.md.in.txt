## Работа 6. Выделение границ проективно искаженных прямоугольников страниц
автор: Бердичевская А.Г.
url: https://mysvn.ru/berdichevskayaag/berdichevskaya_a_g/prj.labs/lab06/

### Задание
1. Реализовать выделение "границ и уголков" на фотографиях документа.
2. Реализовать детектирование наиболее правдоподобного четырехугольника изображения страницы документа на фото.
3. Используя эталонную геометрическую разметку из лабораторной 5 реализовать численную оценку качества выделения отдельных примитивов и финального результата для отдельных изображений и для набора.
4. Реализовать представление результатов выполнения лабораторной (иллюстрации, таблицы, графики и т.д.) и вставить в отчет.

### Результаты

В качестве эталонных координат углов листа взяты точки, полученные с помощью ручной разметки:

|Номер изображения|Название изображения|Верхний левый угол листа|Верхний правый|Нижний левый|Нижний правый|
|---|--------------------|------------------------|--------------|------------|-------------|
|0|lab05.scan.png|(0, 0)|(2450, 0)|(0, 3490)|(2450, 3490) |
|1|lab05.photo1.jpg|(380,484) | (2209,511) | (2306,3215) | (305,3232) |
|2|lab05.photo2.jpg|(400,611) | (2009,609) | (2031,2938) | (379, 2918) |
|3|lab05.photo3.jpg|(534,1966) | (449,294) | (3175,61) | (3088,2165) |
|4|lab05.photo4.jpg|(612,1996) | (694,488) | (3020,203) | (3127,2168)|
|5|lab05.photo5.jpg|(2839,450) | (2786,2169) | (472,2060) | (469,454)|

Перед выделением границ листа, изображения были обработаны, чтобы сделать лишние детали плохо детектируемыми. Для обработки была использована следующая комбинация методов:
- Гауссианское сглаживание с размером окна $15*15$
- Медианное сглаживание с размером ядра $51$
- Адаптивная бинаризация. Использованный порог бинаризации - взвешенная сумма (кросс-корреляция с гауссовым окном) пикселей картинки.
- Гауссианское сглаживание с размером окна $7*7$
- Гауссианское сглаживание с размером окна $15*15$


![](lab06.processed1.png)
Рис. 1. Фотография 1 после предварительной обработки

![](lab06.processed2.png)
Рис. 2. Фотография 2 после предварительной обработки

![](lab06.processed3.png)
Рис. 3. Фотография 3 после предварительной обработки

![](lab06.processed4.png)
Рис. 4. Фотография 4 после предварительной обработки

![](lab06.processed5.png)
Рис. 5. Фотография 5 после предварительной обработки

Первым шагом в детектировании границ было применение детектора границ Кэнни к обработанным изображениям. Для этого использовалась функция cv::Canny со следующими параметрами:
- нижний порог - 100
- верхний порог - 200
- размер ядра - 5

![](lab06.canny_edges1.png)
Рис. 6. Границы, обраруженные детектором Кэнни на фотографии 1

![](lab06.canny_edges2.png)
Рис. 7. Границы, обраруженные детектором Кэнни на фотографии 2

![](lab06.canny_edges3.png)
Рис. 8. Границы, обраруженные детектором Кэнни на фотографии 3

![](lab06.canny_edges4.png)
Рис. 9. Границы, обраруженные детектором Кэнни на фотографии 4

![](lab06.canny_edges5.png)
Рис. 10. Границы, обраруженные детектором Кэнни на фотографии 5

После этого к рисункам, представленным выше, было применено вероятностное преобразование Хаффа для поиска отрезков. Для этого была применена функция cv::HoughLinesP со следующими параметрами:
- \rho (длина радиус-вектора ближайшей к началу координат точки на прямой) - 2
- \theta (угол между радиус-вектором и осью абсцисс) - \pi / 180
- доверительный порог - 200
- минимальная длина отрезка - 200
- максимальный промежуток между отрезками, позволяющий соединить их - 300

Ниже изображеные найденные линии, наложенные на оригинальное изображение

![](lab06.hough1.png)
Рис. 11. Линии, найденные преобразованием Хаффа, наложенные на изображение 1

![](lab06.hough2.png)
Рис. 12. Линии, найденные преобразованием Хаффа, наложенные на изображение 2

![](lab06.hough3.png)
Рис. 13. Линии, найденные преобразованием Хаффа, наложенные на изображение 3

![](lab06.hough4.png)
Рис. 14. Линии, найденные преобразованием Хаффа, наложенные на изображение 4

![](lab06.hough5.png)
Рис. 15. Линии, найденные преобразованием Хаффа, наложенные на изображение 5

После этого осуществлён выбор наиболее подходящих под границы листа линий из всех найденных. 
Для этого все линии перебирались, и из точек их начала и конца выбирались наиболее близкие к соответствующему углу фотографии точки. Таким образом были приняты предполагаемые точки границ листа
Ниже красным цветом изображены найденные границы листа, а синим - эталонные границы.

![](lab06.result1.png)
Рис. 16. Найденные и эталонные границы на изображении 1

![](lab06.result2.png)
Рис. 17. Найденные и эталонные границы на изображении 2

![](lab06.result3.png)
Рис. 18. Найденные и эталонные границы на изображении 3

![](lab06.result4.png)
Рис. 19. Найденные и эталонные границы на изображении 4

![](lab06.result5.png)
Рис. 20. Найденные и эталонные границы на изображении 5

Для численной оценки качества выделения отдельных примитивов (точек углов листа) применялся следующий алгоритм:
- для каждого из 4 углов подсчитывалось евклидово расстояние между найденной и эталонной точками
- найденное расстояние разделялось на длину диагонали листа, посчитанной на основании эталонных точек
- полученное число отнималось от единицы
- среднее арифметическое найденных значений для каждого из углов принималось за оценку качества выделения углов для фотографии

Для численной оценки финального результата использовалась мера Жаккара (intersection over union) для четырёхугольников, образованных выявленными и эталонными точками углов листа.
- по границам (линиям между углами) четырёхугольники отрисовывались на пустых картинках
- для каждого пикселя картинок подсчитывалось, закрашен ли он на одной из картинок либо на обеих
- результат деления второго значения на первое принято за оценку качества финального результата выявления границ листа

В таблице ниже показаны полученные оценки для отдельных изображений и для набора.

|Номер изображения|Название изображения|Оценка выявления примитивов|Оценка финального результата|
|---|--------------------|------------------------|--------------|
|1|lab05.photo1.jpg|0.984| 0.955| 
|2|lab05.photo2.jpg|0.987 | 0.951 | 
|3|lab05.photo3.jpg|0.259 | 0.835 | 
|4|lab05.photo4.jpg|306 | 0.905 |
|5|lab05.photo5.jpg|0.290 | 0.879 | 
||Набор изображений|0.565 | 0.905| 


### Текст программы

```cpp
@cpp_source@
```
